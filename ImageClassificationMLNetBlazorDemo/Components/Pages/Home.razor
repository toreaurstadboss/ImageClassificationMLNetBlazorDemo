@page "/"
@using static BlazorImageClassificationMLNetDemo.HorseOrMooseImageClassifier

<PageTitle>Horse or Moose detection</PageTitle>

<div class="container-fluid">

    <div class="row">
        <div class="col-md-3">
            <h1>Horse or Moose detection</h1>
        </div>
    </div>

    <div class="row">
        <div class="col-md-3">
            <img src="horseormoose.png" class="card-img img-thumbnail" />
        </div>
        <div class="col-md-6">
            <InputFile OnChange="LoadFileAsync" class="form-control" />
            <p>
                Upload an image and let the <em><b>ML.NET</b> Machine Learning</em> model trained used for this DEMO decide
                whether the image is showing a <b>Horse</b> or a <b>Moose</b>, or something else!
                Only Horses or Mooses will be detected in this demo.
            </p>
        </div> 
    </div>

    <div class="row">


        @if (_base64ImageSource is not null)
        {

            @if (_errorMessage is null)
            {
                <div class="col-md-4">

                    <h2>Classification of object or objects in the loaded image</h2>

                    <div class="card col-md-6">
                        <div class="card-body">
                            <h5 class="card-title">Prediction of object</h5>
                            <h6 class="card-subtitle">The machine learning model predicted the following:</h6>
                            <h4 class="card-text text-success text-uppercase">@_predictedLabel</h4>
                        </div>
                    </div>

                </div>

                <div class="col-md-4">

                    <b>Confidence scores</b>
                    @if (_predictedLabels != null)
                    {
                        <ul>
                            @foreach (var score in _predictedLabels)
                            {
                                var scorePercentage = 100 * score.Value;
                                <li><span>@score.Key</span> <span>@scorePercentage.ToString("F1") %</span></li>
                            }

                        </ul>
                    }

                </div>
            }
            else
            {
                <div class="alert-danger">@_errorMessage</div>
            }
        }

    </div>

    <div class="row">
        @if (_base64ImageSource is not null)
        {
            <div class="col-md-4">
                <h6>Loaded image</h6>
                <img src="@_base64ImageSource" title="Loaded image" class="img-thumbnail" />
            </div>
        }

    </div>

</div>

@code {

    private string? _base64ImageSource = null;
    private string? _predictedLabel = "No classification";
    private IOrderedEnumerable<KeyValuePair<string, float>>? _predictedLabels = null;
    private string? _errorMessage = null;

    private async Task LoadFileAsync(InputFileChangeEventArgs e)
    {
        try
        {

            if (e.File.Size <= 0 || e.File.Size >= 2 * 1024 * 1024)
            {
                _errorMessage = "Sorry, the uploaded image but be between 1 byte and 2 MB!";
                return;
            }

            byte[] imageBytes = await GetImageBytes(e.File);
            _base64ImageSource = GetBase64ImageSourceString(e.File.ContentType, imageBytes);

            PredictImageClassification(imageBytes);

        }
        catch (Exception err)
        {
            Console.WriteLine(err);
            _base64ImageSource = null;
        }
    }

    private void PredictImageClassification(byte[] imageBytes)
    {

        var input = new ModelInput
            {
                ImageSource = imageBytes
            };
        ModelOutput output = HorseOrMooseImageClassifier.Predict(input);
        _predictedLabel = output.PredictedLabel;

        _predictedLabels = HorseOrMooseImageClassifier.PredictAllLabels(input);
    }


    private async Task<byte[]> GetImageBytes(IBrowserFile file)
    {
        using MemoryStream memoryStream = new();
        var stream = file.OpenReadStream(2 * 1024 * 1024, CancellationToken.None);
        await stream.CopyToAsync(memoryStream);
        return memoryStream.ToArray();
    }

    private string GetBase64ImageSourceString(string contentType, byte[] bytes)
    {
        string preAmble = $"data:{contentType};base64,";
        return $"{preAmble}{(Convert.ToBase64String(bytes))}";
    }


    }
